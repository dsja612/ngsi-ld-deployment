version: "3.5"
services:
  # API Gateway for various services
  proxy:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    restart: always
    ports:
      - "80:80"
    depends_on:
      - orion
      - mintaka
      - iotagent-json
    networks:
      - orion-ld-network

  # Context Broker
  orion:
    image: fiware/orion-ld:1.4.0
    hostname: orion
    container_name: fiware-orion
    # sometimes the initial startup fails due to a weird timescale behaviour
    restart: always
    environment:
      - ORIONLD_TROE=TRUE
      - ORIONLD_TROE_USER=orion
      - ORIONLD_TROE_PWD=orion
      - ORIONLD_TROE_HOST=timescale
      - ORIONLD_MONGO_HOST=mongo-db
    depends_on:
      - mongo-db
      - timescale
    networks:
      - orion-ld-network
    ports:
      - "1026:1026"
    command: -logLevel DEBUG
    healthcheck:
      test: curl --fail -s http://orion:1026/version || exit 1
      interval: 5s

  # Enable Temporal Representation of Entities (TROE), which is basically historical data
  mintaka:
    image: fiware/mintaka:0.4.3
    hostname: mintaka
    restart: always
    container_name: mintaka
    environment:
      - DATASOURCES_DEFAULT_HOST=timescale
      - DATASOURCES_DEFAULT_USERNAME=orion
      - DATASOURCES_DEFAULT_PASSWORD=orion
      - DATASOURCES_DEFAULT_DATABSE=orion
    expose:
      - "8080"
    ports:
      - "8080:8080"
    networks:
      - orion-ld-network

  # IOT Agent for converting sensor data to NGSI-LD data.
  # Ideally should split this up as IOT agents should be seperately configured
  iotagent-json:
      image: fiware/iotagent-json
      hostname: iotagent-json
      container_name: fiware-iot-agent
      depends_on:
          - mongo-db
      expose:
          - "4041"
          - "7896"
      ports:
          - "4041:4041"
          - "7896:7896"
      environment:
          - "IOTA_CB_HOST=orion"
          - "IOTA_CB_PORT=1026"
          - "IOTA_NORTH_PORT=4041"
          - "IOTA_REGISTRY_TYPE=mongodb"
          - "IOTA_MONGO_HOST=mongo-db"
          - "IOTA_MONGO_PORT=27017"
          - "IOTA_MONGO_DB=iotagent-json"
          - "IOTA_HTTP_PORT=7896"
          - "IOTA_PROVIDER_URL=http://iot-agent:4041"
          # Configuring agent for LD
          - "IOTA_CB_NGSI_VERSION=LD"
          - "IOTA_TIMESTAMP=true"
          - "IOTA_FALLBACK_TENANT=openiot"
          - "IOTA_FALLBACK_PATH=/"
          - "IOTA_JSON_LD_CONTEXT=https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.6.jsonld"
      networks:
        - orion-ld-network

  #############
  # Databases #
  #############
  mongo-db:
    image: mongo:4.0
    hostname: mongo-db
    container_name: db-mongo
    expose:
      - "27017"
    ports:
      - "27017:27017" # localhost:27017
    networks:
      - orion-ld-network
    command: --nojournal
    volumes:
      - mongo-db:/data
    healthcheck:
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`;
        mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1
      interval: 5s

  timescale:
    image: timescale/timescaledb-postgis:1.7.5-pg12
    hostname: timescale
    container_name: timescale
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U orion" ]
      interval: 15s
      timeout: 15s
      retries: 5
      start_period: 60s
    environment:
      - POSTGRES_USER=orion
      - POSTGRES_PASSWORD=orion
      - POSTGRES_HOST_AUTH_METHOD=trust
    expose:
      - "5432"
    ports:
      - "5432:5432"
    networks:
      - orion-ld-network

volumes:
  mongo-db: ~

networks:
  orion-ld-network:
    driver: bridge